'use strict'; // code generated by pbf v3.2.0

// HeaderBlock ========================================

var HeaderBlock = exports.HeaderBlock = {};

HeaderBlock.read = function (pbf, end) {
    return pbf.readFields(HeaderBlock._readField, {bbox: null, required_features: [], optional_features: [], writingprogram: "", source: "", osmosis_replication_timestamp: 0, osmosis_replication_sequence_number: 0, osmosis_replication_base_url: ""}, end);
};
HeaderBlock._readField = function (tag, obj, pbf) {
    switch(tag) {
    case 1: obj.bbox = HeaderBBox.read(pbf, pbf.readVarint() + pbf.pos); break;
    case 4: obj.required_features.push(pbf.readString()); break;
    case 5: obj.optional_features.push(pbf.readString()); break;
    case 16: obj.writingprogram = pbf.readString(); break;
    case 17: obj.source = pbf.readString(); break;
    case 32: obj.osmosis_replication_timestamp = pbf.readVarint(true); break;
    case 33: obj.osmosis_replication_sequence_number = pbf.readVarint(true); break;
    case 34: obj.osmosis_replication_base_url = pbf.readString(); break;
    }
};

// HeaderBBox ========================================

var HeaderBBox = exports.HeaderBBox = {};

HeaderBBox.read = function (pbf, end) {
    return pbf.readFields(HeaderBBox._readField, {left: 0, right: 0, top: 0, bottom: 0}, end);
};
HeaderBBox._readField = function (tag, obj, pbf) {
    switch(tag) {
    case 1: obj.left = pbf.readSVarint(); break;
    case 2: obj.right = pbf.readSVarint(); break;
    case 3: obj.top = pbf.readSVarint(); break;
    case 4: obj.bottom = pbf.readSVarint(); break;
    }
};

// PrimitiveBlock ========================================

var PrimitiveBlock = exports.PrimitiveBlock = {};

PrimitiveBlock.read = function (pbf, end) {
    return pbf.readFields(PrimitiveBlock._readField, {stringtable: null, primitivegroup: [], granularity: 100, lat_offset: 0, lon_offset: 0, date_granularity: 1000}, end);
};
PrimitiveBlock._readField = function (tag, obj, pbf) {
    switch(tag) {
    case 1: obj.stringtable = StringTable.read(pbf, pbf.readVarint() + pbf.pos); break;
    case 2: obj.primitivegroup.push(PrimitiveGroup.read(pbf, pbf.readVarint() + pbf.pos)); break;
    case 17: obj.granularity = pbf.readVarint(true); break;
    case 19: obj.lat_offset = pbf.readVarint(true); break;
    case 20: obj.lon_offset = pbf.readVarint(true); break;
    case 18: obj.date_granularity = pbf.readVarint(true); break;
    }
};

// PrimitiveGroup ========================================

var PrimitiveGroup = exports.PrimitiveGroup = {};

PrimitiveGroup.read = function (pbf, end) {
    return pbf.readFields(PrimitiveGroup._readField, {nodes: [], dense: null, ways: [], relations: [], changesets: []}, end);
};
PrimitiveGroup._readField = function (tag, obj, pbf) {
    switch(tag) {
    case 1: obj.nodes.push(Node.read(pbf, pbf.readVarint() + pbf.pos)); break;
    case 2: obj.dense = DenseNodes.read(pbf, pbf.readVarint() + pbf.pos); break;
    case 3: obj.ways.push(Way.read(pbf, pbf.readVarint() + pbf.pos)); break;
    case 4: obj.relations.push(Relation.read(pbf, pbf.readVarint() + pbf.pos)); break;
    case 5: obj.changesets.push(ChangeSet.read(pbf, pbf.readVarint() + pbf.pos)); break;
    }
};

// StringTable ========================================

var StringTable = exports.StringTable = {};

StringTable.read = function (pbf, end) {
    return pbf.readFields(StringTable._readField, {s: []}, end);
};
StringTable._readField = function (tag, obj, pbf) {
    switch(tag) {
    case 1: obj.s.push(pbf.readBytes()); break;
    }
};

// Info ========================================

var Info = exports.Info = {};

Info.read = function (pbf, end) {
    return pbf.readFields(Info._readField, {version: -1, timestamp: 0, changeset: 0, uid: 0, user_sid: 0, visible: false}, end);
};
Info._readField = function (tag, obj, pbf) {
    switch(tag) {
    case 1: obj.version = pbf.readVarint(true); break;
    case 2: obj.timestamp = pbf.readVarint(true); break;
    case 3: obj.changeset = pbf.readVarint(true); break;
    case 4: obj.uid = pbf.readVarint(true); break;
    case 5: obj.user_sid = pbf.readVarint(); break;
    case 6: obj.visible = pbf.readBoolean(); break;
    }
};

// DenseInfo ========================================

var DenseInfo = exports.DenseInfo = {};

DenseInfo.read = function (pbf, end) {
    return pbf.readFields(DenseInfo._readField, {version: [], timestamp: [], changeset: [], uid: [], user_sid: [], visible: []}, end);
};
DenseInfo._readField = function (tag, obj, pbf) {
    switch(tag) {
    case 1: pbf.readPackedVarint(obj.version, true); break;
    case 2: pbf.readPackedSVarint(obj.timestamp); break;
    case 3: pbf.readPackedSVarint(obj.changeset); break;
    case 4: pbf.readPackedSVarint(obj.uid); break;
    case 5: pbf.readPackedSVarint(obj.user_sid); break;
    case 6: pbf.readPackedBoolean(obj.visible); break;
    }
};

// ChangeSet ========================================

var ChangeSet = exports.ChangeSet = {};

ChangeSet.read = function (pbf, end) {
    return pbf.readFields(ChangeSet._readField, {id: 0}, end);
};
ChangeSet._readField = function (tag, obj, pbf) {
    switch(tag) {
    case 1: obj.id = pbf.readVarint(true); break;
    }
};

// Node ========================================

var Node = exports.Node = {};

Node.read = function (pbf, end) {
    return pbf.readFields(Node._readField, {id: 0, keys: [], vals: [], info: null, lat: 0, lon: 0}, end);
};
Node._readField = function (tag, obj, pbf) {
    switch(tag) {
    case 1: obj.id = pbf.readSVarint(); break;
    case 2: pbf.readPackedVarint(obj.keys); break;
    case 3: pbf.readPackedVarint(obj.vals); break;
    case 4: obj.info = Info.read(pbf, pbf.readVarint() + pbf.pos); break;
    case 8: obj.lat = pbf.readSVarint(); break;
    case 9: obj.lon = pbf.readSVarint(); break;
    }
};

// DenseNodes ========================================

var DenseNodes = exports.DenseNodes = {};

DenseNodes.read = function (pbf, end) {
    return pbf.readFields(DenseNodes._readField, {id: [], denseinfo: null, lat: [], lon: [], keys_vals: []}, end);
};
DenseNodes._readField = function (tag, obj, pbf) {
    switch(tag) {
    case 1: pbf.readPackedSVarint(obj.id); break;
    case 5: obj.denseinfo = DenseInfo.read(pbf, pbf.readVarint() + pbf.pos); break;
    case 8: pbf.readPackedSVarint(obj.lat); break;
    case 9: pbf.readPackedSVarint(obj.lon); break;
    case 10: pbf.readPackedVarint(obj.keys_vals, true); break;
    }
};

// Way ========================================

var Way = exports.Way = {};

Way.read = function (pbf, end) {
    return pbf.readFields(Way._readField, {id: 0, keys: [], vals: [], info: null, refs: []}, end);
};
Way._readField = function (tag, obj, pbf) {
    switch(tag) {
    case 1: obj.id = pbf.readVarint(true); break;
    case 2: pbf.readPackedVarint(obj.keys); break;
    case 3: pbf.readPackedVarint(obj.vals); break;
    case 4: obj.info = Info.read(pbf, pbf.readVarint() + pbf.pos); break;
    case 8: pbf.readPackedSVarint(obj.refs); break;
    }
};

// Relation ========================================

var Relation = exports.Relation = {};

Relation.read = function (pbf, end) {
    return pbf.readFields(Relation._readField, {id: 0, keys: [], vals: [], info: null, roles_sid: [], memids: [], types: []}, end);
};
Relation._readField = function (tag, obj, pbf) {
    switch(tag) {
    case 1: obj.id = pbf.readVarint(true); break;
    case 2: pbf.readPackedVarint(obj.keys); break;
    case 3: pbf.readPackedVarint(obj.vals); break;
    case 4: obj.info = Info.read(pbf, pbf.readVarint() + pbf.pos); break;
    case 8: pbf.readPackedVarint(obj.roles_sid, true); break;
    case 9: pbf.readPackedSVarint(obj.memids); break;
    case 10: pbf.readPackedVarint(obj.types); break;
    }
};

Relation.MemberType = {
    "NODE": {
        "value": 0,
        "options": {}
    },
    "WAY": {
        "value": 1,
        "options": {}
    },
    "RELATION": {
        "value": 2,
        "options": {}
    }
};
